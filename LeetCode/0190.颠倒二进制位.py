# -*- encoding: utf-8 -*-
'''
@File    :   0190.颠倒二进制位.py
@Time    :   2022/02/10 11:29:02
@Author  :   Zhifeng Li
@Contact :   zaaachary_li@163.com
@Desc    :   

颠倒给定的 32 位无符号整数的二进制位。

提示：

请注意，在某些语言（如 Java）中，没有无符号整数类型。
在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，
因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
在 Java 中，编译器使用二进制补码记法来表示有符号整数。
因此，在 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
 

示例 1：

输入：n = 00000010100101000001111010011100
输出：964176192 (00111001011110000010100101000000)
解释：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/reverse-bits
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
'''

class Solution:

    def reverseBits(self, n: int) -> int:


class Solution_1:
    '''
    与&; 或|; 异或 ^; 取反 ~; 左右移<< >>
    '''
    def reverseBits(self, n: int) -> int:
        '''
        字符串实现
        '''
        # 转换成32位的二进制数
        target = bin(n)[2:]
        target = '0'*(32-len(target)) + target
        # 反转后再转换成int
        result = int(target[::-1], base=2)
        return result
        
        